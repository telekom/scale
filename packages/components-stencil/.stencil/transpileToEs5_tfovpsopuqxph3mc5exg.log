import { r as registerInstance, h } from './chunk-5fa7b17b.js';
function createCommonjsModule(fn, module) {
    return module = { exports: {} }, fn(module, module.exports), module.exports;
}
var classnames = createCommonjsModule(function (module) {
    /*!
      Copyright (c) 2017 Jed Watson.
      Licensed under the MIT License (MIT), see
      http://jedwatson.github.io/classnames
    */
    /* global define */
    (function () {
        var hasOwn = {}.hasOwnProperty;
        function classNames() {
            var classes = [];
            for (var i = 0; i < arguments.length; i++) {
                var arg = arguments[i];
                if (!arg)
                    continue;
                var argType = typeof arg;
                if (argType === 'string' || argType === 'number') {
                    classes.push(arg);
                }
                else if (Array.isArray(arg) && arg.length) {
                    var inner = classNames.apply(null, arg);
                    if (inner) {
                        classes.push(inner);
                    }
                }
                else if (argType === 'object') {
                    for (var key in arg) {
                        if (hasOwn.call(arg, key) && arg[key]) {
                            classes.push(key);
                        }
                    }
                }
            }
            return classes.join(' ');
        }
        if (module.exports) {
            classNames.default = classNames;
            module.exports = classNames;
        }
        else {
            window.classNames = classNames;
        }
    }());
});
var alert = /** @class */ (function () {
    function alert(hostRef) {
        registerInstance(this, hostRef);
        this.customClass = '';
        this.size = '';
        this.theme = '';
        this.variant = '';
    }
    alert.prototype.getCssClassMap = function () {
        return classnames('alert', this.customClass && this.customClass, this.size && "alert--size-" + this.size, this.theme && "alert--theme-" + this.theme, this.variant && "alert--variant-" + this.variant);
    };
    alert.prototype.render = function () {
        return (h("div", { class: this.getCssClassMap() }, h("slot", null)));
    };
    Object.defineProperty(alert, "style", {
        get: function () { return "STYLE_TEXT_PLACEHOLDER:t-alert"; },
        enumerable: true,
        configurable: true
    });
    return alert;
}());
var Button = /** @class */ (function () {
    function Button(hostRef) {
        registerInstance(this, hostRef);
        this.size = '';
        this.theme = '';
        this.variant = '';
        this.disabled = false;
        this.deselected = false;
    }
    Button.prototype.getCssClassMap = function () {
        return classnames('button', this.size && "button--size-" + this.size, this.theme && "button--theme-" + this.theme, this.variant && "button--variant-" + this.variant, this.disabled && "button--disabled", this.deselected && "button--deselected");
    };
    Button.prototype.render = function () {
        return (h("button", { class: this.getCssClassMap() }, h("slot", null)));
    };
    Object.defineProperty(Button, "style", {
        get: function () { return "STYLE_TEXT_PLACEHOLDER:t-button"; },
        enumerable: true,
        configurable: true
    });
    return Button;
}());
var card = /** @class */ (function () {
    function card(hostRef) {
        registerInstance(this, hostRef);
        this.size = '';
        this.theme = '';
        this.variant = '';
        this.disabled = false;
        this.deselected = false;
    }
    card.prototype.getCssClassMap = function () {
        return classnames('card', this.size && "card--size-" + this.size, this.theme && "card--theme-" + this.theme, this.variant && "card--variant-" + this.variant, this.disabled && "card--disabled", this.deselected && "card--deselected");
    };
    card.prototype.render = function () {
        return (h("div", { class: this.getCssClassMap() }, h("div", { class: "card__body" }, h("slot", null))));
    };
    Object.defineProperty(card, "style", {
        get: function () { return "STYLE_TEXT_PLACEHOLDER:t-card"; },
        enumerable: true,
        configurable: true
    });
    return card;
}());
export { alert as t_alert, Button as t_button, card as t_card };
