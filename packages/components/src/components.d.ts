/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MenuItem } from "./components/telekom/app-interfaces";
import { CollapsibleEventDetail } from "./components/collapsible/collapsible";
import { DataGridEditEventDetail, DataGridSortedEventDetail } from "./components/data-grid/data-grid";
import { DuetDatePickerChangeEvent, DuetDatePickerDirection, DuetDatePickerFocusEvent } from "@duetds/date-picker/dist/types/components/duet-date-picker/duet-date-picker";
import { DuetLocalizedText } from "@duetds/date-picker/dist/types/components/duet-date-picker/date-localization";
import { InputChangeEventDetail } from "./components/input/input";
export namespace Components {
    interface AppLogo {
        "claim": boolean;
        "claimLang": string;
        "color": string;
        "href"?: string;
        "logoTitle"?: string;
    }
    interface AppMegaMenu {
        "activeRouteId": string;
        "hide": () => void;
        "isActive": boolean;
        "navigation"?: MenuItem[];
    }
    interface AppNavigationMainMobile {
        "activeRouteId": string;
        "hide": () => void;
        "navigation": MenuItem[];
    }
    interface AppNavigationSectorMobile {
        "activeSectorId"?: string;
        "hide": () => void;
        "navigation": MenuItem[];
    }
    interface ScaleAccordion {
        /**
          * If `true`, only one scale-collapsible within the accordion can be open at a time
         */
        "dependent": boolean;
        /**
          * If `true`, scale-collapsibles within the accordion will all be open initially, unless this is dependant
         */
        "expanded": boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleAlert {
        /**
          * (optional) Alert title
         */
        "headline": string;
        /**
          * (optional) Alert icon
         */
        "icon"?: string;
        /**
          * Alert method: open()
         */
        "open": () => Promise<void>;
        /**
          * (optional) Alert opened
         */
        "opened": boolean;
        /**
          * (optional) Alert size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Alert timeout
         */
        "timeout"?: boolean | number;
        /**
          * (optional) Alert variant
         */
        "variant"?: string;
    }
    interface ScaleAppFooter {
        "claimLang": string;
        "footerNavigation"?: any;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        "variant"?: string;
    }
    interface ScaleAppHeader {
        "activeRouteId": string;
        "activeSectorId"?: string;
        "addonNavigation"?: any;
        "claimLang": string;
        "iconNavigation"?: any;
        "isMegaMenuVisible"?: boolean;
        "isMobileMenuVisible"?: boolean;
        "logoClick"?: any;
        "logoHref"?: string;
        "logoTitle"?: string;
        "mainNavigation"?: any;
        "portalName"?: string;
        "sectorNavigation"?: any;
    }
    interface ScaleAppShell {
        "activeRouteId"?: string;
        "activeSectorId"?: string;
        "addonNavigation"?: any;
        "claimLang"?: string;
        "iconNavigation"?: any;
        "logoClick"?: any;
        "logoHref"?: string;
        "logoTitle"?: string;
        "mainNavigation"?: any;
        "portalName"?: string;
        "sectorNavigation"?: any;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleBreadcrumb {
        "separator"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleButton {
        /**
          * (optional) aria-label attribute needed for icon-only buttons
         */
        "ariaLabel": string;
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) When present, an <a> tag will be used
         */
        "href"?: string;
        /**
          * (optional) Set to `true` when the button contains only an icon
         */
        "iconOnly"?: boolean;
        /**
          * (optional) Icon position related to the label
         */
        "iconPosition": 'before' | 'after';
        /**
          * (optional) The size of the button
         */
        "size"?: 'small' | 'large';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) The target attribute for the <a> tag
         */
        "target"?: string;
        /**
          * (optional) Button type
         */
        "type"?: 'reset' | 'submit' | 'button';
        /**
          * (optional) Button variant
         */
        "variant"?: string;
    }
    interface ScaleCard {
        "clickCard"?: any;
        /**
          * (optional) Label of the card
         */
        "label"?: string;
        /**
          * (optional) Link card rel
         */
        "rel"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Link card target
         */
        "target"?: string;
        /**
          * (optional) Link card
         */
        "to"?: string;
    }
    interface ScaleCarousel {
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) carousel display direction
         */
        "vertical"?: boolean;
    }
    interface ScaleChartStackCard {
        /**
          * Chart Data
         */
        "data": string | Array<Record<'type' | 'value' | 'percentage', string>>;
        /**
          * Chart Title
         */
        "heading": string;
    }
    interface ScaleCheckbox {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleCollapsible {
        /**
          * Set to `true` to expand
         */
        "expanded": boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleDataGrid {
        /**
          * Input fields config array
         */
        "fields": any;
        /**
          * (optional) Freeze header row from scrolling
         */
        "freezeHeader"?: boolean;
        /**
          * (optional) Heading string
         */
        "heading"?: string;
        /**
          * (optional) Set static table height, by default will auto-resize
         */
        "height"?: string;
        /**
          * (optional) Set to true to remove border
         */
        "hideBorder"?: boolean;
        /**
          * (optional) Set to true to hide header row
         */
        "hideHeader"?: boolean;
        /**
          * (optional) Set to true to remove info footer block including pagination and selection status
         */
        "hideInfo"?: boolean;
        /**
          * (optional) Set to true to hide settings menu
         */
        "hideMenu"?: boolean;
        /**
          * (optional) Set to true to add numbers column
         */
        "numbered"?: boolean;
        /**
          * (optional) Set number of rows to display per pagination page
         */
        "pageSize"?: number;
        /**
          * Input data array
         */
        "rows": any;
        /**
          * (optional) Set to true to add selection column
         */
        "selectable"?: boolean;
        /**
          * Read-only selection array - populated with raw data from selected rows
         */
        "selection": string[];
        /**
          * (optional) Shade every second row darker
         */
        "shadeAlternate"?: boolean;
        /**
          * (optional) Injected css styles
         */
        "styles": any;
        /**
          * (optional) Set to falseto hide table, used for nested tables to re-render upon toggle
         */
        "visible"?: boolean;
    }
    interface ScaleDatePicker {
        /**
          * Date adapter, for custom parsing/formatting. Must be object with a `parse` function which accepts a `string` and returns a `Date`, and a `format` function which accepts a `Date` and returns a `string`. Default is IS0-8601 parsing and formatting.
         */
        "dateAdapter"?: any;
        /**
          * Forces the opening direction of the calendar modal to be always left or right. This setting can be useful when the input is smaller than the opening date picker would be as by default the picker always opens towards right.
         */
        "direction": DuetDatePickerDirection;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Which day is considered first day of the week? `0` for Sunday, `1` for Monday, etc. Default is Monday.
         */
        "firstDayOfWeek"?: any;
        /**
          * (optional) Helper text
         */
        "helperText"?: string;
        /**
          * Hide the calendar modal. Set `moveFocusToButton` to false to prevent focus returning to the date picker's button. Default is true.
         */
        "hide": (moveFocusToButton?: boolean) => Promise<void>;
        /**
          * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
         */
        "identifier": string;
        /**
          * (optional) Label
         */
        "label": string;
        /**
          * Button labels, day names, month names, etc, used for localization. Default is English.
         */
        "localization"?: DuetLocalizedText;
        /**
          * Maximum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the min property.
         */
        "max": string;
        /**
          * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the max property.
         */
        "min": string;
        /**
          * Name of the date picker input.
         */
        "name": string;
        /**
          * Should the input be marked as required?
         */
        "required": boolean;
        /**
          * Defines a specific role attribute for the date picker input.
         */
        "role": string;
        /**
          * Sets focus on the date picker's input. Use this method instead of the global `focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Show the calendar modal, moving focus to the calendar inside.
         */
        "show": () => Promise<void>;
        /**
          * (optional) Size
         */
        "size"?: string;
        /**
          * (optional) Status
         */
        "status"?: string;
        /**
          * Date value. Must be in IS0-8601 format: YYYY-MM-DD.
         */
        "value": string;
    }
    interface ScaleDivider {
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Divider vertical
         */
        "vertical"?: boolean;
    }
    interface ScaleDropdown {
        /**
          * (optional) Makes type `select` behave as a controlled component in React
         */
        "controlled"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * (optional) Input status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
    interface ScaleIcon {
        /**
          * (optional) When using the icon as standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) If `true` the svg element will get aria-hidden="true"
         */
        "decorative"?: boolean;
        /**
          * The SVG `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * A name that will be used to reference an SVG object defined elsewhere, via `<use xlink:href="">`. `icon-` will be prepended to the name, so if you pass `circle`, it will look for for the `icon-circle` id e.g. `<use xlink:href="#icon-circle">`. If there is no element in the document with the id by the name provided, this component will render empty.
         */
        "name"?: string;
        /**
          * A path shape to be used in the `d` attribute of a path element.
         */
        "path"?: string;
        /**
          * Will be used for both `width` and `height`, all icons are square. Keep in mind the `viewBox` attribute is set to "0 0 24 24".
         */
        "size"?: number;
        /**
          * The SVG `stroke` attribute
         */
        "stroke"?: string;
    }
    interface ScaleIconActionAdd {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCircleClose {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionClose {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionDownload {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionEdit {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFavorite {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionHidePassword {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionLogout {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionRandom {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSearch {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSort {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSuccess {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertImprintDataprivacy {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentCalendar {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentHeart {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeHome {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationCollapseDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationCollapseUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationExternalLink {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationLeft {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationRight {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceDevicesService {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceMaintanance {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceServices {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceSettings {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceSupport {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileAnalytics {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleInput {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Makes type `select` behave as a controlled component in React
         */
        "controlled"?: boolean;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox checked icon
         */
        "icon"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * (optional) Input status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'checkbox'
    | 'radio'
    | 'select'
    | 'textarea'
    | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Input label variant
         */
        "variant"?: 'animated' | 'static';
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
    interface ScaleLink {
        /**
          * (optional) Block link
         */
        "block"?: boolean;
        /**
          * (optional) Disabled link
         */
        "disabled"?: boolean;
        /**
          * (optional) Link href
         */
        "href": string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Link open a new tag
         */
        "target"?: string;
        /**
          * (optional) Link variant
         */
        "variant"?: string;
    }
    interface ScaleList {
        /**
          * (optional) Make the list ordered (ol)
         */
        "ordered"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleListItem {
        /**
          * Index number, useful only for styling the `ordered` type
         */
        "index"?: number;
        /**
          * If `false`, no marker or left padding will be visible
         */
        "marker": boolean;
        /**
          * Whether this is a child of an ordered scale-list, gets set automatically by its parent
         */
        "ordered"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleLogo {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle": string;
        /**
          * (optional) Possibility for adding a onClick Event
         */
        "clickHandler": any;
        /**
          * (optional) Set a link
         */
        "href": string;
        /**
          * (optional) Language of the logo text/ claimOff showes just the T Logo
         */
        "language": | 'de'
    | 'en'
    | 'cz'
    | 'hr'
    | 'hu'
    | 'me'
    | 'mk_lat'
    | 'mk_kyr'
    | 'ro'
    | 'sk'
    | '';
        /**
          * (optional) The height in pixels
         */
        "size": number;
        /**
          * (optional) Set transparent background
         */
        "transparent": boolean;
        /**
          * (optional) Variant/color of the logo text and logo
         */
        "variant": 'magenta' | 'white';
    }
    interface ScaleLogoSvg {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) The languages for the Text behind the Logo
         */
        "language": | 'de'
    | 'en'
    | 'cz'
    | 'hr'
    | 'hu'
    | 'me'
    | 'mk_lat'
    | 'mk_kyr'
    | 'ro'
    | 'sk'
    | '';
        /**
          * (optional) The height in pixels
         */
        "size"?: number;
    }
    interface ScaleMenuFlyout {
        /**
          * (optional) Determines whether the dropdown should close when a menu item is selected
         */
        "closeOnSelect": boolean;
        /**
          * (optional) Set preference for where the menu appears, space permitting
         */
        "direction": | 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left'
    | 'right'
    | 'left';
        /**
          * (optional) Tracks the menu list open state
         */
        "open": boolean;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
    }
    interface ScaleMenuFlyoutDivider {
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
    }
    interface ScaleMenuFlyoutItem {
        /**
          * (optional) Used by cascading menus to set when open
         */
        "active"?: boolean;
        /**
          * (optional) Set to true to display arrow icon suffix
         */
        "cascade"?: boolean;
        /**
          * (optional) Set to true to display check prefix, false to display empty prefix
         */
        "checked"?: any;
        /**
          * (optional) Disabled
         */
        "disabled"?: boolean;
        /**
          * Removes the focus from the item
         */
        "removeFocus": () => Promise<void>;
        /**
          * Sets the focus on the item
         */
        "setFocus": () => Promise<void>;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        /**
          * (optional) value
         */
        "value"?: string;
    }
    interface ScaleMenuFlyoutList {
        /**
          * Menu calls this once opened and rendered
         */
        "opened": () => Promise<void>;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
    }
    interface ScaleModal {
        /**
          * (optional) Alignment of action buttons
         */
        "alignActions"?: 'right' | 'left';
        /**
          * (optional) Label for close button
         */
        "closeButtonLabel"?: string;
        /**
          * (optional) Custom class
         */
        "customClass"?: string;
        /**
          * (optional) Transition duration
         */
        "duration"?: number;
        /**
          * Modal heading
         */
        "heading": string;
        /**
          * (optional) If `true`, the Modal is open.
         */
        "opened"?: boolean;
        /**
          * (optional) Modal size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleNavIcon {
        "clickLink": any;
        /**
          * (optional) href value
         */
        "href"?: string;
        "icon": string;
        /**
          * (optional) if this item is active
         */
        "isActive"?: boolean;
        "isMobileMenuOpen"?: boolean;
        "refMobileMenuToggle"?: any;
    }
    interface ScaleNavMain {
        "clickLink": any;
        /**
          * (optional) href value
         */
        "href"?: string;
        /**
          * (optional) if this item is active
         */
        "isActive"?: boolean;
        /**
          * (optional) if this mega-menu is visible
         */
        "isMegaMenuVisible"?: boolean;
        /**
          * (optional) name value
         */
        "name": string;
    }
    interface ScaleNavSegment {
        /**
          * (optional) href value
         */
        "href"?: string;
        /**
          * (optional) if this item is active
         */
        "isActive"?: boolean;
    }
    interface ScalePagination {
        /**
          * (optional) Set to true to hide top and bottom borders
         */
        "hideBorders"?: boolean;
        /**
          * (optional) Set number of rows/elements to show per page
         */
        "pageSize"?: number;
        /**
          * (optional) Index of first element to display
         */
        "startElement"?: number;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        /**
          * (optional) Total number of rows/elements used to calculate page displays
         */
        "totalElements"?: number;
    }
    interface ScaleProgressBar {
        /**
          * (optional) Progress bar busy switch
         */
        "busy"?: boolean;
        /**
          * (optional) Progress bar customColor
         */
        "customColor"?: string;
        /**
          * (optional) Progress bar disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Progress bar error
         */
        "hasError"?: boolean;
        /**
          * (optional) Progress bar icon indicator
         */
        "icon"?: string;
        /**
          * (optional) Progress bar label
         */
        "label"?: string;
        /**
          * (required) Progress bar percentage
         */
        "percentage": number;
        /**
          * (optional) Progress bar id
         */
        "progressBarId"?: string;
        /**
          * (optional) Progress bar percentage text
         */
        "showStatus"?: boolean;
        /**
          * (optional) Progress bar status description text
         */
        "statusDescription"?: string;
        /**
          * (optional) Progress text display inside bar
         */
        "statusInside"?: boolean;
        /**
          * (optional) Progress bar stroke width
         */
        "strokeWidth"?: number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleRadioButton {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleRatingStars {
        "ariaTranslation": string;
        "disabled": boolean;
        "hoverValue": number;
        "isHovering": boolean;
        "numOfStars": number;
        "precision": number;
        "rating": number;
        "small": boolean;
    }
    interface ScaleSidebarNav {
        /**
          * From mdn: A brief description of the purpose of the navigation, omitting the term "navigation", as the screen reader will read both the role and the contents of the label.
         */
        "ariaLabel"?: string;
        /**
          * Set to `true` to make the sidebar toggleable (useful for small screens)
         */
        "collapsible"?: boolean;
        /**
          * Label for toggle button
         */
        "collapsibleLabel"?: string;
        /**
          * Automatically set `collapsible` based on this media query
         */
        "collapsibleMediaQuery"?: string;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
    }
    interface ScaleSidebarNavCollapsible {
        /**
          * Label and icon get the active color
         */
        "active"?: boolean;
        /**
          * Bold label and icon
         */
        "bold": boolean;
        /**
          * Used normally for third level items
         */
        "condensed": boolean;
        /**
          * Set this to `true` to expand
         */
        "expanded": boolean;
        /**
          * The URL where the link should point to
         */
        "href": string;
        /**
          * The text for the button
         */
        "label": string;
        /**
          * Nesting level within the <scale-sidebar-nav> parent, gets set automatically
         */
        "nestingLevel": number;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
        /**
          * The parent wrapper
         */
        "tag"?: string;
    }
    interface ScaleSidebarNavItem {
        /**
          * Text gets the active color
         */
        "active": boolean;
        /**
          * Bold text
         */
        "bold": boolean;
        /**
          * Used normally for third level items, remove the bottom border
         */
        "condensed": boolean;
        /**
          * Mark the child link as "current" with `aria-current=page`. Provide the text hint if needed, default is: "Zurzeit aktiv"
         */
        "current": string | null;
        /**
          * Nesting level within the <scale-sidebar-nav> parent, gets set automatically
         */
        "nestingLevel": number;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
    }
    interface ScaleSlider {
        /**
          * (optional) slider custom color
         */
        "customColor"?: string;
        /**
          * (optional) disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) slider label
         */
        "label"?: string;
        /**
          * (optional) the maximal value of the slider
         */
        "max"?: number;
        /**
          * t(optional) he minimal value of the slider
         */
        "min"?: number;
        /**
          * (optional) slider display value
         */
        "showValue"?: boolean;
        /**
          * (optional) Slider id
         */
        "sliderId"?: string;
        /**
          * (optional) the step size to increase or decrease when dragging slider
         */
        "step"?: number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) larger thumb
         */
        "thumbLarge"?: boolean;
        /**
          * (optional) smaller track
         */
        "trackSmall"?: boolean;
        /**
          * (optional) the display value of the slider
         */
        "value"?: number;
    }
    interface ScaleSsrSlotFix {
    }
    interface ScaleSwitch {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Disabled switch
         */
        "disabled"?: boolean;
        /**
          * (optional) Input id
         */
        "inputId"?: string;
        /**
          * (optional) switch label
         */
        "label"?: string;
    }
    interface ScaleTabHeader {
        "selected": boolean;
        /**
          * True for smaller height and font size
         */
        "small": boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabNav {
        /**
          * True for smaller height and font size in tab headers.
         */
        "small": boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabPanel {
        /**
          * True for smaller height and font size
         */
        "small": boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTable {
        /**
          * (optional) Display sort arrows on/off
         */
        "showSort"?: boolean;
        /**
          * (optional) Visual size
         */
        "size"?: 'default' | 'small' | string;
    }
    interface ScaleTag {
        /**
          * (optional) Tag disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Dismiss label
         */
        "dismissText"?: string;
        /**
          * (optional) Tag dismissable
         */
        "dismissable"?: boolean;
        /**
          * (optional) Tag href
         */
        "href"?: string;
        /**
          * (optional) Tag size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Tag target
         */
        "target"?: string;
        /**
          * (optional) Tag variant
         */
        "variant"?: string;
    }
    interface ScaleTextField {
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input readonly
         */
        "readonly"?: boolean;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * (optional) Input status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'date'
    | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleTextarea {
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * (optional) Input status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleToast {
        /**
          * (optional) Animated toast
         */
        "animated"?: boolean;
        /**
          * (optional) Toast autohide time
         */
        "autoHide"?: boolean | number;
        /**
          * (optional) Toast fade duration
         */
        "fadeDuration"?: number;
        /**
          * Toast method: open()
         */
        "open": () => Promise<void>;
        /**
          * (optional) Toast opened
         */
        "opened"?: boolean;
        /**
          * (optional) Toast position right
         */
        "positionRight"?: number;
        /**
          * (optional) Toast position at the top
         */
        "positionTop"?: number;
        /**
          * (optional) Toast size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Toast time
         */
        "time"?: number;
        /**
          * (optional) Toast variant
         */
        "variant"?: string;
    }
}
declare global {
    interface HTMLAppLogoElement extends Components.AppLogo, HTMLStencilElement {
    }
    var HTMLAppLogoElement: {
        prototype: HTMLAppLogoElement;
        new (): HTMLAppLogoElement;
    };
    interface HTMLAppMegaMenuElement extends Components.AppMegaMenu, HTMLStencilElement {
    }
    var HTMLAppMegaMenuElement: {
        prototype: HTMLAppMegaMenuElement;
        new (): HTMLAppMegaMenuElement;
    };
    interface HTMLAppNavigationMainMobileElement extends Components.AppNavigationMainMobile, HTMLStencilElement {
    }
    var HTMLAppNavigationMainMobileElement: {
        prototype: HTMLAppNavigationMainMobileElement;
        new (): HTMLAppNavigationMainMobileElement;
    };
    interface HTMLAppNavigationSectorMobileElement extends Components.AppNavigationSectorMobile, HTMLStencilElement {
    }
    var HTMLAppNavigationSectorMobileElement: {
        prototype: HTMLAppNavigationSectorMobileElement;
        new (): HTMLAppNavigationSectorMobileElement;
    };
    interface HTMLScaleAccordionElement extends Components.ScaleAccordion, HTMLStencilElement {
    }
    var HTMLScaleAccordionElement: {
        prototype: HTMLScaleAccordionElement;
        new (): HTMLScaleAccordionElement;
    };
    interface HTMLScaleAlertElement extends Components.ScaleAlert, HTMLStencilElement {
    }
    var HTMLScaleAlertElement: {
        prototype: HTMLScaleAlertElement;
        new (): HTMLScaleAlertElement;
    };
    interface HTMLScaleAppFooterElement extends Components.ScaleAppFooter, HTMLStencilElement {
    }
    var HTMLScaleAppFooterElement: {
        prototype: HTMLScaleAppFooterElement;
        new (): HTMLScaleAppFooterElement;
    };
    interface HTMLScaleAppHeaderElement extends Components.ScaleAppHeader, HTMLStencilElement {
    }
    var HTMLScaleAppHeaderElement: {
        prototype: HTMLScaleAppHeaderElement;
        new (): HTMLScaleAppHeaderElement;
    };
    interface HTMLScaleAppShellElement extends Components.ScaleAppShell, HTMLStencilElement {
    }
    var HTMLScaleAppShellElement: {
        prototype: HTMLScaleAppShellElement;
        new (): HTMLScaleAppShellElement;
    };
    interface HTMLScaleBreadcrumbElement extends Components.ScaleBreadcrumb, HTMLStencilElement {
    }
    var HTMLScaleBreadcrumbElement: {
        prototype: HTMLScaleBreadcrumbElement;
        new (): HTMLScaleBreadcrumbElement;
    };
    interface HTMLScaleButtonElement extends Components.ScaleButton, HTMLStencilElement {
    }
    var HTMLScaleButtonElement: {
        prototype: HTMLScaleButtonElement;
        new (): HTMLScaleButtonElement;
    };
    interface HTMLScaleCardElement extends Components.ScaleCard, HTMLStencilElement {
    }
    var HTMLScaleCardElement: {
        prototype: HTMLScaleCardElement;
        new (): HTMLScaleCardElement;
    };
    interface HTMLScaleCarouselElement extends Components.ScaleCarousel, HTMLStencilElement {
    }
    var HTMLScaleCarouselElement: {
        prototype: HTMLScaleCarouselElement;
        new (): HTMLScaleCarouselElement;
    };
    interface HTMLScaleChartStackCardElement extends Components.ScaleChartStackCard, HTMLStencilElement {
    }
    var HTMLScaleChartStackCardElement: {
        prototype: HTMLScaleChartStackCardElement;
        new (): HTMLScaleChartStackCardElement;
    };
    interface HTMLScaleCheckboxElement extends Components.ScaleCheckbox, HTMLStencilElement {
    }
    var HTMLScaleCheckboxElement: {
        prototype: HTMLScaleCheckboxElement;
        new (): HTMLScaleCheckboxElement;
    };
    interface HTMLScaleCollapsibleElement extends Components.ScaleCollapsible, HTMLStencilElement {
    }
    var HTMLScaleCollapsibleElement: {
        prototype: HTMLScaleCollapsibleElement;
        new (): HTMLScaleCollapsibleElement;
    };
    interface HTMLScaleDataGridElement extends Components.ScaleDataGrid, HTMLStencilElement {
    }
    var HTMLScaleDataGridElement: {
        prototype: HTMLScaleDataGridElement;
        new (): HTMLScaleDataGridElement;
    };
    interface HTMLScaleDatePickerElement extends Components.ScaleDatePicker, HTMLStencilElement {
    }
    var HTMLScaleDatePickerElement: {
        prototype: HTMLScaleDatePickerElement;
        new (): HTMLScaleDatePickerElement;
    };
    interface HTMLScaleDividerElement extends Components.ScaleDivider, HTMLStencilElement {
    }
    var HTMLScaleDividerElement: {
        prototype: HTMLScaleDividerElement;
        new (): HTMLScaleDividerElement;
    };
    interface HTMLScaleDropdownElement extends Components.ScaleDropdown, HTMLStencilElement {
    }
    var HTMLScaleDropdownElement: {
        prototype: HTMLScaleDropdownElement;
        new (): HTMLScaleDropdownElement;
    };
    interface HTMLScaleIconElement extends Components.ScaleIcon, HTMLStencilElement {
    }
    var HTMLScaleIconElement: {
        prototype: HTMLScaleIconElement;
        new (): HTMLScaleIconElement;
    };
    interface HTMLScaleIconActionAddElement extends Components.ScaleIconActionAdd, HTMLStencilElement {
    }
    var HTMLScaleIconActionAddElement: {
        prototype: HTMLScaleIconActionAddElement;
        new (): HTMLScaleIconActionAddElement;
    };
    interface HTMLScaleIconActionCircleCloseElement extends Components.ScaleIconActionCircleClose, HTMLStencilElement {
    }
    var HTMLScaleIconActionCircleCloseElement: {
        prototype: HTMLScaleIconActionCircleCloseElement;
        new (): HTMLScaleIconActionCircleCloseElement;
    };
    interface HTMLScaleIconActionCloseElement extends Components.ScaleIconActionClose, HTMLStencilElement {
    }
    var HTMLScaleIconActionCloseElement: {
        prototype: HTMLScaleIconActionCloseElement;
        new (): HTMLScaleIconActionCloseElement;
    };
    interface HTMLScaleIconActionDownloadElement extends Components.ScaleIconActionDownload, HTMLStencilElement {
    }
    var HTMLScaleIconActionDownloadElement: {
        prototype: HTMLScaleIconActionDownloadElement;
        new (): HTMLScaleIconActionDownloadElement;
    };
    interface HTMLScaleIconActionEditElement extends Components.ScaleIconActionEdit, HTMLStencilElement {
    }
    var HTMLScaleIconActionEditElement: {
        prototype: HTMLScaleIconActionEditElement;
        new (): HTMLScaleIconActionEditElement;
    };
    interface HTMLScaleIconActionFavoriteElement extends Components.ScaleIconActionFavorite, HTMLStencilElement {
    }
    var HTMLScaleIconActionFavoriteElement: {
        prototype: HTMLScaleIconActionFavoriteElement;
        new (): HTMLScaleIconActionFavoriteElement;
    };
    interface HTMLScaleIconActionHidePasswordElement extends Components.ScaleIconActionHidePassword, HTMLStencilElement {
    }
    var HTMLScaleIconActionHidePasswordElement: {
        prototype: HTMLScaleIconActionHidePasswordElement;
        new (): HTMLScaleIconActionHidePasswordElement;
    };
    interface HTMLScaleIconActionLogoutElement extends Components.ScaleIconActionLogout, HTMLStencilElement {
    }
    var HTMLScaleIconActionLogoutElement: {
        prototype: HTMLScaleIconActionLogoutElement;
        new (): HTMLScaleIconActionLogoutElement;
    };
    interface HTMLScaleIconActionRandomElement extends Components.ScaleIconActionRandom, HTMLStencilElement {
    }
    var HTMLScaleIconActionRandomElement: {
        prototype: HTMLScaleIconActionRandomElement;
        new (): HTMLScaleIconActionRandomElement;
    };
    interface HTMLScaleIconActionSearchElement extends Components.ScaleIconActionSearch, HTMLStencilElement {
    }
    var HTMLScaleIconActionSearchElement: {
        prototype: HTMLScaleIconActionSearchElement;
        new (): HTMLScaleIconActionSearchElement;
    };
    interface HTMLScaleIconActionSortElement extends Components.ScaleIconActionSort, HTMLStencilElement {
    }
    var HTMLScaleIconActionSortElement: {
        prototype: HTMLScaleIconActionSortElement;
        new (): HTMLScaleIconActionSortElement;
    };
    interface HTMLScaleIconActionSuccessElement extends Components.ScaleIconActionSuccess, HTMLStencilElement {
    }
    var HTMLScaleIconActionSuccessElement: {
        prototype: HTMLScaleIconActionSuccessElement;
        new (): HTMLScaleIconActionSuccessElement;
    };
    interface HTMLScaleIconAlertImprintDataprivacyElement extends Components.ScaleIconAlertImprintDataprivacy, HTMLStencilElement {
    }
    var HTMLScaleIconAlertImprintDataprivacyElement: {
        prototype: HTMLScaleIconAlertImprintDataprivacyElement;
        new (): HTMLScaleIconAlertImprintDataprivacyElement;
    };
    interface HTMLScaleIconContentCalendarElement extends Components.ScaleIconContentCalendar, HTMLStencilElement {
    }
    var HTMLScaleIconContentCalendarElement: {
        prototype: HTMLScaleIconContentCalendarElement;
        new (): HTMLScaleIconContentCalendarElement;
    };
    interface HTMLScaleIconContentHeartElement extends Components.ScaleIconContentHeart, HTMLStencilElement {
    }
    var HTMLScaleIconContentHeartElement: {
        prototype: HTMLScaleIconContentHeartElement;
        new (): HTMLScaleIconContentHeartElement;
    };
    interface HTMLScaleIconHomeHomeElement extends Components.ScaleIconHomeHome, HTMLStencilElement {
    }
    var HTMLScaleIconHomeHomeElement: {
        prototype: HTMLScaleIconHomeHomeElement;
        new (): HTMLScaleIconHomeHomeElement;
    };
    interface HTMLScaleIconNavigationCollapseDownElement extends Components.ScaleIconNavigationCollapseDown, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationCollapseDownElement: {
        prototype: HTMLScaleIconNavigationCollapseDownElement;
        new (): HTMLScaleIconNavigationCollapseDownElement;
    };
    interface HTMLScaleIconNavigationCollapseUpElement extends Components.ScaleIconNavigationCollapseUp, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationCollapseUpElement: {
        prototype: HTMLScaleIconNavigationCollapseUpElement;
        new (): HTMLScaleIconNavigationCollapseUpElement;
    };
    interface HTMLScaleIconNavigationExternalLinkElement extends Components.ScaleIconNavigationExternalLink, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationExternalLinkElement: {
        prototype: HTMLScaleIconNavigationExternalLinkElement;
        new (): HTMLScaleIconNavigationExternalLinkElement;
    };
    interface HTMLScaleIconNavigationLeftElement extends Components.ScaleIconNavigationLeft, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationLeftElement: {
        prototype: HTMLScaleIconNavigationLeftElement;
        new (): HTMLScaleIconNavigationLeftElement;
    };
    interface HTMLScaleIconNavigationRightElement extends Components.ScaleIconNavigationRight, HTMLStencilElement {
    }
    var HTMLScaleIconNavigationRightElement: {
        prototype: HTMLScaleIconNavigationRightElement;
        new (): HTMLScaleIconNavigationRightElement;
    };
    interface HTMLScaleIconServiceDevicesServiceElement extends Components.ScaleIconServiceDevicesService, HTMLStencilElement {
    }
    var HTMLScaleIconServiceDevicesServiceElement: {
        prototype: HTMLScaleIconServiceDevicesServiceElement;
        new (): HTMLScaleIconServiceDevicesServiceElement;
    };
    interface HTMLScaleIconServiceMaintananceElement extends Components.ScaleIconServiceMaintanance, HTMLStencilElement {
    }
    var HTMLScaleIconServiceMaintananceElement: {
        prototype: HTMLScaleIconServiceMaintananceElement;
        new (): HTMLScaleIconServiceMaintananceElement;
    };
    interface HTMLScaleIconServiceServicesElement extends Components.ScaleIconServiceServices, HTMLStencilElement {
    }
    var HTMLScaleIconServiceServicesElement: {
        prototype: HTMLScaleIconServiceServicesElement;
        new (): HTMLScaleIconServiceServicesElement;
    };
    interface HTMLScaleIconServiceSettingsElement extends Components.ScaleIconServiceSettings, HTMLStencilElement {
    }
    var HTMLScaleIconServiceSettingsElement: {
        prototype: HTMLScaleIconServiceSettingsElement;
        new (): HTMLScaleIconServiceSettingsElement;
    };
    interface HTMLScaleIconServiceSupportElement extends Components.ScaleIconServiceSupport, HTMLStencilElement {
    }
    var HTMLScaleIconServiceSupportElement: {
        prototype: HTMLScaleIconServiceSupportElement;
        new (): HTMLScaleIconServiceSupportElement;
    };
    interface HTMLScaleIconUserFileAnalyticsElement extends Components.ScaleIconUserFileAnalytics, HTMLStencilElement {
    }
    var HTMLScaleIconUserFileAnalyticsElement: {
        prototype: HTMLScaleIconUserFileAnalyticsElement;
        new (): HTMLScaleIconUserFileAnalyticsElement;
    };
    interface HTMLScaleInputElement extends Components.ScaleInput, HTMLStencilElement {
    }
    var HTMLScaleInputElement: {
        prototype: HTMLScaleInputElement;
        new (): HTMLScaleInputElement;
    };
    interface HTMLScaleLinkElement extends Components.ScaleLink, HTMLStencilElement {
    }
    var HTMLScaleLinkElement: {
        prototype: HTMLScaleLinkElement;
        new (): HTMLScaleLinkElement;
    };
    interface HTMLScaleListElement extends Components.ScaleList, HTMLStencilElement {
    }
    var HTMLScaleListElement: {
        prototype: HTMLScaleListElement;
        new (): HTMLScaleListElement;
    };
    interface HTMLScaleListItemElement extends Components.ScaleListItem, HTMLStencilElement {
    }
    var HTMLScaleListItemElement: {
        prototype: HTMLScaleListItemElement;
        new (): HTMLScaleListItemElement;
    };
    interface HTMLScaleLogoElement extends Components.ScaleLogo, HTMLStencilElement {
    }
    var HTMLScaleLogoElement: {
        prototype: HTMLScaleLogoElement;
        new (): HTMLScaleLogoElement;
    };
    interface HTMLScaleLogoSvgElement extends Components.ScaleLogoSvg, HTMLStencilElement {
    }
    var HTMLScaleLogoSvgElement: {
        prototype: HTMLScaleLogoSvgElement;
        new (): HTMLScaleLogoSvgElement;
    };
    interface HTMLScaleMenuFlyoutElement extends Components.ScaleMenuFlyout, HTMLStencilElement {
    }
    var HTMLScaleMenuFlyoutElement: {
        prototype: HTMLScaleMenuFlyoutElement;
        new (): HTMLScaleMenuFlyoutElement;
    };
    interface HTMLScaleMenuFlyoutDividerElement extends Components.ScaleMenuFlyoutDivider, HTMLStencilElement {
    }
    var HTMLScaleMenuFlyoutDividerElement: {
        prototype: HTMLScaleMenuFlyoutDividerElement;
        new (): HTMLScaleMenuFlyoutDividerElement;
    };
    interface HTMLScaleMenuFlyoutItemElement extends Components.ScaleMenuFlyoutItem, HTMLStencilElement {
    }
    var HTMLScaleMenuFlyoutItemElement: {
        prototype: HTMLScaleMenuFlyoutItemElement;
        new (): HTMLScaleMenuFlyoutItemElement;
    };
    interface HTMLScaleMenuFlyoutListElement extends Components.ScaleMenuFlyoutList, HTMLStencilElement {
    }
    var HTMLScaleMenuFlyoutListElement: {
        prototype: HTMLScaleMenuFlyoutListElement;
        new (): HTMLScaleMenuFlyoutListElement;
    };
    interface HTMLScaleModalElement extends Components.ScaleModal, HTMLStencilElement {
    }
    var HTMLScaleModalElement: {
        prototype: HTMLScaleModalElement;
        new (): HTMLScaleModalElement;
    };
    interface HTMLScaleNavIconElement extends Components.ScaleNavIcon, HTMLStencilElement {
    }
    var HTMLScaleNavIconElement: {
        prototype: HTMLScaleNavIconElement;
        new (): HTMLScaleNavIconElement;
    };
    interface HTMLScaleNavMainElement extends Components.ScaleNavMain, HTMLStencilElement {
    }
    var HTMLScaleNavMainElement: {
        prototype: HTMLScaleNavMainElement;
        new (): HTMLScaleNavMainElement;
    };
    interface HTMLScaleNavSegmentElement extends Components.ScaleNavSegment, HTMLStencilElement {
    }
    var HTMLScaleNavSegmentElement: {
        prototype: HTMLScaleNavSegmentElement;
        new (): HTMLScaleNavSegmentElement;
    };
    interface HTMLScalePaginationElement extends Components.ScalePagination, HTMLStencilElement {
    }
    var HTMLScalePaginationElement: {
        prototype: HTMLScalePaginationElement;
        new (): HTMLScalePaginationElement;
    };
    interface HTMLScaleProgressBarElement extends Components.ScaleProgressBar, HTMLStencilElement {
    }
    var HTMLScaleProgressBarElement: {
        prototype: HTMLScaleProgressBarElement;
        new (): HTMLScaleProgressBarElement;
    };
    interface HTMLScaleRadioButtonElement extends Components.ScaleRadioButton, HTMLStencilElement {
    }
    var HTMLScaleRadioButtonElement: {
        prototype: HTMLScaleRadioButtonElement;
        new (): HTMLScaleRadioButtonElement;
    };
    interface HTMLScaleRatingStarsElement extends Components.ScaleRatingStars, HTMLStencilElement {
    }
    var HTMLScaleRatingStarsElement: {
        prototype: HTMLScaleRatingStarsElement;
        new (): HTMLScaleRatingStarsElement;
    };
    interface HTMLScaleSidebarNavElement extends Components.ScaleSidebarNav, HTMLStencilElement {
    }
    var HTMLScaleSidebarNavElement: {
        prototype: HTMLScaleSidebarNavElement;
        new (): HTMLScaleSidebarNavElement;
    };
    interface HTMLScaleSidebarNavCollapsibleElement extends Components.ScaleSidebarNavCollapsible, HTMLStencilElement {
    }
    var HTMLScaleSidebarNavCollapsibleElement: {
        prototype: HTMLScaleSidebarNavCollapsibleElement;
        new (): HTMLScaleSidebarNavCollapsibleElement;
    };
    interface HTMLScaleSidebarNavItemElement extends Components.ScaleSidebarNavItem, HTMLStencilElement {
    }
    var HTMLScaleSidebarNavItemElement: {
        prototype: HTMLScaleSidebarNavItemElement;
        new (): HTMLScaleSidebarNavItemElement;
    };
    interface HTMLScaleSliderElement extends Components.ScaleSlider, HTMLStencilElement {
    }
    var HTMLScaleSliderElement: {
        prototype: HTMLScaleSliderElement;
        new (): HTMLScaleSliderElement;
    };
    interface HTMLScaleSsrSlotFixElement extends Components.ScaleSsrSlotFix, HTMLStencilElement {
    }
    var HTMLScaleSsrSlotFixElement: {
        prototype: HTMLScaleSsrSlotFixElement;
        new (): HTMLScaleSsrSlotFixElement;
    };
    interface HTMLScaleSwitchElement extends Components.ScaleSwitch, HTMLStencilElement {
    }
    var HTMLScaleSwitchElement: {
        prototype: HTMLScaleSwitchElement;
        new (): HTMLScaleSwitchElement;
    };
    interface HTMLScaleTabHeaderElement extends Components.ScaleTabHeader, HTMLStencilElement {
    }
    var HTMLScaleTabHeaderElement: {
        prototype: HTMLScaleTabHeaderElement;
        new (): HTMLScaleTabHeaderElement;
    };
    interface HTMLScaleTabNavElement extends Components.ScaleTabNav, HTMLStencilElement {
    }
    var HTMLScaleTabNavElement: {
        prototype: HTMLScaleTabNavElement;
        new (): HTMLScaleTabNavElement;
    };
    interface HTMLScaleTabPanelElement extends Components.ScaleTabPanel, HTMLStencilElement {
    }
    var HTMLScaleTabPanelElement: {
        prototype: HTMLScaleTabPanelElement;
        new (): HTMLScaleTabPanelElement;
    };
    interface HTMLScaleTableElement extends Components.ScaleTable, HTMLStencilElement {
    }
    var HTMLScaleTableElement: {
        prototype: HTMLScaleTableElement;
        new (): HTMLScaleTableElement;
    };
    interface HTMLScaleTagElement extends Components.ScaleTag, HTMLStencilElement {
    }
    var HTMLScaleTagElement: {
        prototype: HTMLScaleTagElement;
        new (): HTMLScaleTagElement;
    };
    interface HTMLScaleTextFieldElement extends Components.ScaleTextField, HTMLStencilElement {
    }
    var HTMLScaleTextFieldElement: {
        prototype: HTMLScaleTextFieldElement;
        new (): HTMLScaleTextFieldElement;
    };
    interface HTMLScaleTextareaElement extends Components.ScaleTextarea, HTMLStencilElement {
    }
    var HTMLScaleTextareaElement: {
        prototype: HTMLScaleTextareaElement;
        new (): HTMLScaleTextareaElement;
    };
    interface HTMLScaleToastElement extends Components.ScaleToast, HTMLStencilElement {
    }
    var HTMLScaleToastElement: {
        prototype: HTMLScaleToastElement;
        new (): HTMLScaleToastElement;
    };
    interface HTMLElementTagNameMap {
        "app-logo": HTMLAppLogoElement;
        "app-mega-menu": HTMLAppMegaMenuElement;
        "app-navigation-main-mobile": HTMLAppNavigationMainMobileElement;
        "app-navigation-sector-mobile": HTMLAppNavigationSectorMobileElement;
        "scale-accordion": HTMLScaleAccordionElement;
        "scale-alert": HTMLScaleAlertElement;
        "scale-app-footer": HTMLScaleAppFooterElement;
        "scale-app-header": HTMLScaleAppHeaderElement;
        "scale-app-shell": HTMLScaleAppShellElement;
        "scale-breadcrumb": HTMLScaleBreadcrumbElement;
        "scale-button": HTMLScaleButtonElement;
        "scale-card": HTMLScaleCardElement;
        "scale-carousel": HTMLScaleCarouselElement;
        "scale-chart-stack-card": HTMLScaleChartStackCardElement;
        "scale-checkbox": HTMLScaleCheckboxElement;
        "scale-collapsible": HTMLScaleCollapsibleElement;
        "scale-data-grid": HTMLScaleDataGridElement;
        "scale-date-picker": HTMLScaleDatePickerElement;
        "scale-divider": HTMLScaleDividerElement;
        "scale-dropdown": HTMLScaleDropdownElement;
        "scale-icon": HTMLScaleIconElement;
        "scale-icon-action-add": HTMLScaleIconActionAddElement;
        "scale-icon-action-circle-close": HTMLScaleIconActionCircleCloseElement;
        "scale-icon-action-close": HTMLScaleIconActionCloseElement;
        "scale-icon-action-download": HTMLScaleIconActionDownloadElement;
        "scale-icon-action-edit": HTMLScaleIconActionEditElement;
        "scale-icon-action-favorite": HTMLScaleIconActionFavoriteElement;
        "scale-icon-action-hide-password": HTMLScaleIconActionHidePasswordElement;
        "scale-icon-action-logout": HTMLScaleIconActionLogoutElement;
        "scale-icon-action-random": HTMLScaleIconActionRandomElement;
        "scale-icon-action-search": HTMLScaleIconActionSearchElement;
        "scale-icon-action-sort": HTMLScaleIconActionSortElement;
        "scale-icon-action-success": HTMLScaleIconActionSuccessElement;
        "scale-icon-alert-imprint-dataprivacy": HTMLScaleIconAlertImprintDataprivacyElement;
        "scale-icon-content-calendar": HTMLScaleIconContentCalendarElement;
        "scale-icon-content-heart": HTMLScaleIconContentHeartElement;
        "scale-icon-home-home": HTMLScaleIconHomeHomeElement;
        "scale-icon-navigation-collapse-down": HTMLScaleIconNavigationCollapseDownElement;
        "scale-icon-navigation-collapse-up": HTMLScaleIconNavigationCollapseUpElement;
        "scale-icon-navigation-external-link": HTMLScaleIconNavigationExternalLinkElement;
        "scale-icon-navigation-left": HTMLScaleIconNavigationLeftElement;
        "scale-icon-navigation-right": HTMLScaleIconNavigationRightElement;
        "scale-icon-service-devices-service": HTMLScaleIconServiceDevicesServiceElement;
        "scale-icon-service-maintanance": HTMLScaleIconServiceMaintananceElement;
        "scale-icon-service-services": HTMLScaleIconServiceServicesElement;
        "scale-icon-service-settings": HTMLScaleIconServiceSettingsElement;
        "scale-icon-service-support": HTMLScaleIconServiceSupportElement;
        "scale-icon-user-file-analytics": HTMLScaleIconUserFileAnalyticsElement;
        "scale-input": HTMLScaleInputElement;
        "scale-link": HTMLScaleLinkElement;
        "scale-list": HTMLScaleListElement;
        "scale-list-item": HTMLScaleListItemElement;
        "scale-logo": HTMLScaleLogoElement;
        "scale-logo-svg": HTMLScaleLogoSvgElement;
        "scale-menu-flyout": HTMLScaleMenuFlyoutElement;
        "scale-menu-flyout-divider": HTMLScaleMenuFlyoutDividerElement;
        "scale-menu-flyout-item": HTMLScaleMenuFlyoutItemElement;
        "scale-menu-flyout-list": HTMLScaleMenuFlyoutListElement;
        "scale-modal": HTMLScaleModalElement;
        "scale-nav-icon": HTMLScaleNavIconElement;
        "scale-nav-main": HTMLScaleNavMainElement;
        "scale-nav-segment": HTMLScaleNavSegmentElement;
        "scale-pagination": HTMLScalePaginationElement;
        "scale-progress-bar": HTMLScaleProgressBarElement;
        "scale-radio-button": HTMLScaleRadioButtonElement;
        "scale-rating-stars": HTMLScaleRatingStarsElement;
        "scale-sidebar-nav": HTMLScaleSidebarNavElement;
        "scale-sidebar-nav-collapsible": HTMLScaleSidebarNavCollapsibleElement;
        "scale-sidebar-nav-item": HTMLScaleSidebarNavItemElement;
        "scale-slider": HTMLScaleSliderElement;
        "scale-ssr-slot-fix": HTMLScaleSsrSlotFixElement;
        "scale-switch": HTMLScaleSwitchElement;
        "scale-tab-header": HTMLScaleTabHeaderElement;
        "scale-tab-nav": HTMLScaleTabNavElement;
        "scale-tab-panel": HTMLScaleTabPanelElement;
        "scale-table": HTMLScaleTableElement;
        "scale-tag": HTMLScaleTagElement;
        "scale-text-field": HTMLScaleTextFieldElement;
        "scale-textarea": HTMLScaleTextareaElement;
        "scale-toast": HTMLScaleToastElement;
    }
}
declare namespace LocalJSX {
    interface AppLogo {
        "claim"?: boolean;
        "claimLang"?: string;
        "color"?: string;
        "href"?: string;
        "logoTitle"?: string;
    }
    interface AppMegaMenu {
        "activeRouteId"?: string;
        "hide"?: () => void;
        "isActive"?: boolean;
        "navigation"?: MenuItem[];
    }
    interface AppNavigationMainMobile {
        "activeRouteId"?: string;
        "hide"?: () => void;
        "navigation"?: MenuItem[];
        "onCloseMenu"?: (event: CustomEvent<any>) => void;
    }
    interface AppNavigationSectorMobile {
        "activeSectorId"?: string;
        "hide"?: () => void;
        "navigation"?: MenuItem[];
    }
    interface ScaleAccordion {
        /**
          * If `true`, only one scale-collapsible within the accordion can be open at a time
         */
        "dependent"?: boolean;
        /**
          * If `true`, scale-collapsibles within the accordion will all be open initially, unless this is dependant
         */
        "expanded"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleAlert {
        /**
          * (optional) Alert title
         */
        "headline"?: string;
        /**
          * (optional) Alert icon
         */
        "icon"?: string;
        /**
          * (optional) Alert opened
         */
        "opened"?: boolean;
        /**
          * (optional) Alert size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Alert timeout
         */
        "timeout"?: boolean | number;
        /**
          * (optional) Alert variant
         */
        "variant"?: string;
    }
    interface ScaleAppFooter {
        "claimLang"?: string;
        "footerNavigation"?: any;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        "variant"?: string;
    }
    interface ScaleAppHeader {
        "activeRouteId"?: string;
        "activeSectorId"?: string;
        "addonNavigation"?: any;
        "claimLang"?: string;
        "iconNavigation"?: any;
        "isMegaMenuVisible"?: boolean;
        "isMobileMenuVisible"?: boolean;
        "logoClick"?: any;
        "logoHref"?: string;
        "logoTitle"?: string;
        "mainNavigation"?: any;
        "portalName"?: string;
        "sectorNavigation"?: any;
    }
    interface ScaleAppShell {
        "activeRouteId"?: string;
        "activeSectorId"?: string;
        "addonNavigation"?: any;
        "claimLang"?: string;
        "iconNavigation"?: any;
        "logoClick"?: any;
        "logoHref"?: string;
        "logoTitle"?: string;
        "mainNavigation"?: any;
        "portalName"?: string;
        "sectorNavigation"?: any;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleBreadcrumb {
        "separator"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleButton {
        /**
          * (optional) aria-label attribute needed for icon-only buttons
         */
        "ariaLabel"?: string;
        /**
          * (optional) If `true`, the button is disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) When present, an <a> tag will be used
         */
        "href"?: string;
        /**
          * (optional) Set to `true` when the button contains only an icon
         */
        "iconOnly"?: boolean;
        /**
          * (optional) Icon position related to the label
         */
        "iconPosition"?: 'before' | 'after';
        /**
          * (optional) The size of the button
         */
        "size"?: 'small' | 'large';
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) The target attribute for the <a> tag
         */
        "target"?: string;
        /**
          * (optional) Button type
         */
        "type"?: 'reset' | 'submit' | 'button';
        /**
          * (optional) Button variant
         */
        "variant"?: string;
    }
    interface ScaleCard {
        "clickCard"?: any;
        /**
          * (optional) Label of the card
         */
        "label"?: string;
        /**
          * (optional) Link card rel
         */
        "rel"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Link card target
         */
        "target"?: string;
        /**
          * (optional) Link card
         */
        "to"?: string;
    }
    interface ScaleCarousel {
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) carousel display direction
         */
        "vertical"?: boolean;
    }
    interface ScaleChartStackCard {
        /**
          * Chart Data
         */
        "data"?: string | Array<Record<'type' | 'value' | 'percentage', string>>;
        /**
          * Chart Title
         */
        "heading"?: string;
    }
    interface ScaleCheckbox {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onScaleChange"?: (event: CustomEvent<any>) => void;
        /**
          * (optional) Input status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleCollapsible {
        /**
          * Set to `true` to expand
         */
        "expanded"?: boolean;
        /**
          * Emitted so parent <scale-accordion> knows about it
         */
        "onScaleExpand"?: (event: CustomEvent<CollapsibleEventDetail>) => void;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleDataGrid {
        /**
          * Input fields config array
         */
        "fields"?: any;
        /**
          * (optional) Freeze header row from scrolling
         */
        "freezeHeader"?: boolean;
        /**
          * (optional) Heading string
         */
        "heading"?: string;
        /**
          * (optional) Set static table height, by default will auto-resize
         */
        "height"?: string;
        /**
          * (optional) Set to true to remove border
         */
        "hideBorder"?: boolean;
        /**
          * (optional) Set to true to hide header row
         */
        "hideHeader"?: boolean;
        /**
          * (optional) Set to true to remove info footer block including pagination and selection status
         */
        "hideInfo"?: boolean;
        /**
          * (optional) Set to true to hide settings menu
         */
        "hideMenu"?: boolean;
        /**
          * (optional) Set to true to add numbers column
         */
        "numbered"?: boolean;
        /**
          * Event triggered every time the editable cells are changed, updating the original rows data
         */
        "onScaleEdit"?: (event: CustomEvent<DataGridEditEventDetail>) => void;
        /**
          * Event triggered every time the data is sorted, changing original rows data
         */
        "onScaleSort"?: (event: CustomEvent<DataGridSortedEventDetail>) => void;
        /**
          * (optional) Set number of rows to display per pagination page
         */
        "pageSize"?: number;
        /**
          * Input data array
         */
        "rows"?: any;
        /**
          * (optional) Set to true to add selection column
         */
        "selectable"?: boolean;
        /**
          * Read-only selection array - populated with raw data from selected rows
         */
        "selection"?: string[];
        /**
          * (optional) Shade every second row darker
         */
        "shadeAlternate"?: boolean;
        /**
          * (optional) Injected css styles
         */
        "styles"?: any;
        /**
          * (optional) Set to falseto hide table, used for nested tables to re-render upon toggle
         */
        "visible"?: boolean;
    }
    interface ScaleDatePicker {
        /**
          * Date adapter, for custom parsing/formatting. Must be object with a `parse` function which accepts a `string` and returns a `Date`, and a `format` function which accepts a `Date` and returns a `string`. Default is IS0-8601 parsing and formatting.
         */
        "dateAdapter"?: any;
        /**
          * Forces the opening direction of the calendar modal to be always left or right. This setting can be useful when the input is smaller than the opening date picker would be as by default the picker always opens towards right.
         */
        "direction"?: DuetDatePickerDirection;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Which day is considered first day of the week? `0` for Sunday, `1` for Monday, etc. Default is Monday.
         */
        "firstDayOfWeek"?: any;
        /**
          * (optional) Helper text
         */
        "helperText"?: string;
        /**
          * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
         */
        "identifier"?: string;
        /**
          * (optional) Label
         */
        "label"?: string;
        /**
          * Button labels, day names, month names, etc, used for localization. Default is English.
         */
        "localization"?: DuetLocalizedText;
        /**
          * Maximum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the min property.
         */
        "max"?: string;
        /**
          * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the max property.
         */
        "min"?: string;
        /**
          * Name of the date picker input.
         */
        "name"?: string;
        /**
          * Event emitted the date picker input is blurred.
         */
        "onScaleBlur"?: (event: CustomEvent<DuetDatePickerFocusEvent>) => void;
        /**
          * Event emitted when a date is selected.
         */
        "onScaleChange"?: (event: CustomEvent<DuetDatePickerChangeEvent>) => void;
        /**
          * Event emitted the date picker input is focused.
         */
        "onScaleFocus"?: (event: CustomEvent<DuetDatePickerFocusEvent>) => void;
        /**
          * Should the input be marked as required?
         */
        "required"?: boolean;
        /**
          * Defines a specific role attribute for the date picker input.
         */
        "role"?: string;
        /**
          * (optional) Size
         */
        "size"?: string;
        /**
          * (optional) Status
         */
        "status"?: string;
        /**
          * Date value. Must be in IS0-8601 format: YYYY-MM-DD.
         */
        "value"?: string;
    }
    interface ScaleDivider {
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Divider vertical
         */
        "vertical"?: boolean;
    }
    interface ScaleDropdown {
        /**
          * (optional) Makes type `select` behave as a controlled component in React
         */
        "controlled"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onScaleBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onScaleChange"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onScaleFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onScaleInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted on keydown.
         */
        "onScaleKeyDown"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * (optional) Input status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
    interface ScaleIcon {
        /**
          * (optional) When using the icon as standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) If `true` the svg element will get aria-hidden="true"
         */
        "decorative"?: boolean;
        /**
          * The SVG `fill` attribute
         */
        "fill"?: string;
        /**
          * (optional) If `true` the icon can receive focus
         */
        "focusable"?: boolean;
        /**
          * A name that will be used to reference an SVG object defined elsewhere, via `<use xlink:href="">`. `icon-` will be prepended to the name, so if you pass `circle`, it will look for for the `icon-circle` id e.g. `<use xlink:href="#icon-circle">`. If there is no element in the document with the id by the name provided, this component will render empty.
         */
        "name"?: string;
        /**
          * A path shape to be used in the `d` attribute of a path element.
         */
        "path"?: string;
        /**
          * Will be used for both `width` and `height`, all icons are square. Keep in mind the `viewBox` attribute is set to "0 0 24 24".
         */
        "size"?: number;
        /**
          * The SVG `stroke` attribute
         */
        "stroke"?: string;
    }
    interface ScaleIconActionAdd {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionCircleClose {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionClose {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionDownload {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionEdit {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionFavorite {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionHidePassword {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionLogout {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionRandom {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSearch {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSort {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconActionSuccess {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconAlertImprintDataprivacy {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentCalendar {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconContentHeart {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconHomeHome {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationCollapseDown {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationCollapseUp {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationExternalLink {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationLeft {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconNavigationRight {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceDevicesService {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceMaintanance {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceServices {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceSettings {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconServiceSupport {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleIconUserFileAnalytics {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) If `true` the SVG element will get `aria-hidden="true"`
         */
        "decorative"?: boolean;
        /**
          * (optional) If `true`, the icon changes visually
         */
        "selected"?: boolean;
        /**
          * (optional) The width and height in pixels
         */
        "size"?: number;
    }
    interface ScaleInput {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Makes type `select` behave as a controlled component in React
         */
        "controlled"?: boolean;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox checked icon
         */
        "icon"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onScaleBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onScaleChange"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onScaleFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onScaleInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted on keydown.
         */
        "onScaleKeyDown"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * (optional) Input status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'checkbox'
    | 'radio'
    | 'select'
    | 'textarea'
    | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Input label variant
         */
        "variant"?: 'animated' | 'static';
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
    interface ScaleLink {
        /**
          * (optional) Block link
         */
        "block"?: boolean;
        /**
          * (optional) Disabled link
         */
        "disabled"?: boolean;
        /**
          * (optional) Link href
         */
        "href"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Link open a new tag
         */
        "target"?: string;
        /**
          * (optional) Link variant
         */
        "variant"?: string;
    }
    interface ScaleList {
        /**
          * (optional) Make the list ordered (ol)
         */
        "ordered"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleListItem {
        /**
          * Index number, useful only for styling the `ordered` type
         */
        "index"?: number;
        /**
          * If `false`, no marker or left padding will be visible
         */
        "marker"?: boolean;
        /**
          * Whether this is a child of an ordered scale-list, gets set automatically by its parent
         */
        "ordered"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleLogo {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Possibility for adding a onClick Event
         */
        "clickHandler"?: any;
        /**
          * (optional) Set a link
         */
        "href"?: string;
        /**
          * (optional) Language of the logo text/ claimOff showes just the T Logo
         */
        "language"?: | 'de'
    | 'en'
    | 'cz'
    | 'hr'
    | 'hu'
    | 'me'
    | 'mk_lat'
    | 'mk_kyr'
    | 'ro'
    | 'sk'
    | '';
        /**
          * (optional) The height in pixels
         */
        "size"?: number;
        /**
          * (optional) Set transparent background
         */
        "transparent"?: boolean;
        /**
          * (optional) Variant/color of the logo text and logo
         */
        "variant"?: 'magenta' | 'white';
    }
    interface ScaleLogoSvg {
        /**
          * (optional) When using the icon standalone, make it meaningful for accessibility
         */
        "accessibilityTitle"?: string;
        /**
          * (optional) Sets the icon color via the `fill` attribute
         */
        "color"?: string;
        /**
          * (optional) The languages for the Text behind the Logo
         */
        "language"?: | 'de'
    | 'en'
    | 'cz'
    | 'hr'
    | 'hu'
    | 'me'
    | 'mk_lat'
    | 'mk_kyr'
    | 'ro'
    | 'sk'
    | '';
        /**
          * (optional) The height in pixels
         */
        "size"?: number;
    }
    interface ScaleMenuFlyout {
        /**
          * (optional) Determines whether the dropdown should close when a menu item is selected
         */
        "closeOnSelect"?: boolean;
        /**
          * (optional) Set preference for where the menu appears, space permitting
         */
        "direction"?: | 'bottom-right'
    | 'bottom-left'
    | 'top-right'
    | 'top-left'
    | 'right'
    | 'left';
        /**
          * Event triggered when menu list closed
         */
        "onScaleClose"?: (event: CustomEvent<{
    id: number;
    cascadeLevel: number;
  }>) => void;
        /**
          * Event triggered when menu list opened
         */
        "onScaleOpen"?: (event: CustomEvent<{
    id: number;
    cascadeLevel: number;
  }>) => void;
        /**
          * Event triggered when nested menu item selected
         */
        "onScaleSelect"?: (event: CustomEvent<{
    item: HTMLElement;
  }>) => void;
        /**
          * (optional) Tracks the menu list open state
         */
        "open"?: boolean;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
    }
    interface ScaleMenuFlyoutDivider {
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
    }
    interface ScaleMenuFlyoutItem {
        /**
          * (optional) Used by cascading menus to set when open
         */
        "active"?: boolean;
        /**
          * (optional) Set to true to display arrow icon suffix
         */
        "cascade"?: boolean;
        /**
          * (optional) Set to true to display check prefix, false to display empty prefix
         */
        "checked"?: any;
        /**
          * (optional) Disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        /**
          * (optional) value
         */
        "value"?: string;
    }
    interface ScaleMenuFlyoutList {
        /**
          * Event triggered every time the data is edited, changing original rows data
         */
        "onScaleSelect"?: (event: CustomEvent<{
    item: HTMLElement;
  }>) => void;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
    }
    interface ScaleModal {
        /**
          * (optional) Alignment of action buttons
         */
        "alignActions"?: 'right' | 'left';
        /**
          * (optional) Label for close button
         */
        "closeButtonLabel"?: string;
        /**
          * (optional) Custom class
         */
        "customClass"?: string;
        /**
          * (optional) Transition duration
         */
        "duration"?: number;
        /**
          * Modal heading
         */
        "heading"?: string;
        "onScaleClose"?: (event: CustomEvent<any>) => void;
        "onScaleOpen"?: (event: CustomEvent<any>) => void;
        /**
          * (optional) If `true`, the Modal is open.
         */
        "opened"?: boolean;
        /**
          * (optional) Modal size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleNavIcon {
        "clickLink"?: any;
        /**
          * (optional) href value
         */
        "href"?: string;
        "icon"?: string;
        /**
          * (optional) if this item is active
         */
        "isActive"?: boolean;
        "isMobileMenuOpen"?: boolean;
        "refMobileMenuToggle"?: any;
    }
    interface ScaleNavMain {
        "clickLink"?: any;
        /**
          * (optional) href value
         */
        "href"?: string;
        /**
          * (optional) if this item is active
         */
        "isActive"?: boolean;
        /**
          * (optional) if this mega-menu is visible
         */
        "isMegaMenuVisible"?: boolean;
        /**
          * (optional) name value
         */
        "name"?: string;
    }
    interface ScaleNavSegment {
        /**
          * (optional) href value
         */
        "href"?: string;
        /**
          * (optional) if this item is active
         */
        "isActive"?: boolean;
    }
    interface ScalePagination {
        /**
          * (optional) Set to true to hide top and bottom borders
         */
        "hideBorders"?: boolean;
        /**
          * Event triggered every time the data is edited, changing original rows data
         */
        "onScalePagination"?: (event: CustomEvent<{
    startElement?: number;
    currentPage?: number;
  }>) => void;
        /**
          * (optional) Set number of rows/elements to show per page
         */
        "pageSize"?: number;
        /**
          * (optional) Index of first element to display
         */
        "startElement"?: number;
        /**
          * (optional) Injected styles
         */
        "styles"?: string;
        /**
          * (optional) Total number of rows/elements used to calculate page displays
         */
        "totalElements"?: number;
    }
    interface ScaleProgressBar {
        /**
          * (optional) Progress bar busy switch
         */
        "busy"?: boolean;
        /**
          * (optional) Progress bar customColor
         */
        "customColor"?: string;
        /**
          * (optional) Progress bar disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Progress bar error
         */
        "hasError"?: boolean;
        /**
          * (optional) Progress bar icon indicator
         */
        "icon"?: string;
        /**
          * (optional) Progress bar label
         */
        "label"?: string;
        /**
          * (required) Progress bar percentage
         */
        "percentage"?: number;
        /**
          * (optional) Progress bar id
         */
        "progressBarId"?: string;
        /**
          * (optional) Progress bar percentage text
         */
        "showStatus"?: boolean;
        /**
          * (optional) Progress bar status description text
         */
        "statusDescription"?: string;
        /**
          * (optional) Progress text display inside bar
         */
        "statusInside"?: boolean;
        /**
          * (optional) Progress bar stroke width
         */
        "strokeWidth"?: number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleRadioButton {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onScaleChange"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * (optional) Input status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleRatingStars {
        "ariaTranslation"?: string;
        "disabled"?: boolean;
        "hoverValue"?: number;
        "isHovering"?: boolean;
        "numOfStars"?: number;
        "precision"?: number;
        "rating"?: number;
        "small"?: boolean;
    }
    interface ScaleSidebarNav {
        /**
          * From mdn: A brief description of the purpose of the navigation, omitting the term "navigation", as the screen reader will read both the role and the contents of the label.
         */
        "ariaLabel"?: string;
        /**
          * Set to `true` to make the sidebar toggleable (useful for small screens)
         */
        "collapsible"?: boolean;
        /**
          * Label for toggle button
         */
        "collapsibleLabel"?: string;
        /**
          * Automatically set `collapsible` based on this media query
         */
        "collapsibleMediaQuery"?: string;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
    }
    interface ScaleSidebarNavCollapsible {
        /**
          * Label and icon get the active color
         */
        "active"?: boolean;
        /**
          * Bold label and icon
         */
        "bold"?: boolean;
        /**
          * Used normally for third level items
         */
        "condensed"?: boolean;
        /**
          * Set this to `true` to expand
         */
        "expanded"?: boolean;
        /**
          * The URL where the link should point to
         */
        "href"?: string;
        /**
          * The text for the button
         */
        "label"?: string;
        /**
          * Nesting level within the <scale-sidebar-nav> parent, gets set automatically
         */
        "nestingLevel"?: number;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
        /**
          * The parent wrapper
         */
        "tag"?: string;
    }
    interface ScaleSidebarNavItem {
        /**
          * Text gets the active color
         */
        "active"?: boolean;
        /**
          * Bold text
         */
        "bold"?: boolean;
        /**
          * Used normally for third level items, remove the bottom border
         */
        "condensed"?: boolean;
        /**
          * Mark the child link as "current" with `aria-current=page`. Provide the text hint if needed, default is: "Zurzeit aktiv"
         */
        "current"?: string | null;
        /**
          * Nesting level within the <scale-sidebar-nav> parent, gets set automatically
         */
        "nestingLevel"?: number;
        /**
          * (optional) Extra styles
         */
        "styles"?: string;
    }
    interface ScaleSlider {
        /**
          * (optional) slider custom color
         */
        "customColor"?: string;
        /**
          * (optional) disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) slider label
         */
        "label"?: string;
        /**
          * (optional) the maximal value of the slider
         */
        "max"?: number;
        /**
          * t(optional) he minimal value of the slider
         */
        "min"?: number;
        "onScaleChange"?: (event: CustomEvent<number>) => void;
        /**
          * (optional) slider display value
         */
        "showValue"?: boolean;
        /**
          * (optional) Slider id
         */
        "sliderId"?: string;
        /**
          * (optional) the step size to increase or decrease when dragging slider
         */
        "step"?: number;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) larger thumb
         */
        "thumbLarge"?: boolean;
        /**
          * (optional) smaller track
         */
        "trackSmall"?: boolean;
        /**
          * (optional) the display value of the slider
         */
        "value"?: number;
    }
    interface ScaleSsrSlotFix {
    }
    interface ScaleSwitch {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Disabled switch
         */
        "disabled"?: boolean;
        /**
          * (optional) Input id
         */
        "inputId"?: string;
        /**
          * (optional) switch label
         */
        "label"?: string;
        /**
          * Emitted when the switch was clicked
         */
        "onScaleChange"?: (event: CustomEvent<any>) => void;
    }
    interface ScaleTabHeader {
        "selected"?: boolean;
        /**
          * True for smaller height and font size
         */
        "small"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabNav {
        /**
          * True for smaller height and font size in tab headers.
         */
        "small"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTabPanel {
        /**
          * True for smaller height and font size
         */
        "small"?: boolean;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
    }
    interface ScaleTable {
        /**
          * (optional) Display sort arrows on/off
         */
        "showSort"?: boolean;
        /**
          * (optional) Visual size
         */
        "size"?: 'default' | 'small' | string;
    }
    interface ScaleTag {
        /**
          * (optional) Tag disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Dismiss label
         */
        "dismissText"?: string;
        /**
          * (optional) Tag dismissable
         */
        "dismissable"?: boolean;
        /**
          * (optional) Tag href
         */
        "href"?: string;
        /**
          * (optional) Close icon click event
         */
        "onScaleClose"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * (optional) Tag size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Tag target
         */
        "target"?: string;
        /**
          * (optional) Tag variant
         */
        "variant"?: string;
    }
    interface ScaleTextField {
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onScaleBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onScaleChange"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onScaleFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onScaleInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted on keydown.
         */
        "onScaleKeyDown"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input readonly
         */
        "readonly"?: boolean;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * (optional) Input status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'date'
    | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleTextarea {
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onScaleBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onScaleChange"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onScaleFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onScaleInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted on keydown.
         */
        "onScaleKeyDown"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * (optional) Input status
         */
        "status"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
    }
    interface ScaleToast {
        /**
          * (optional) Animated toast
         */
        "animated"?: boolean;
        /**
          * (optional) Toast autohide time
         */
        "autoHide"?: boolean | number;
        /**
          * (optional) Toast fade duration
         */
        "fadeDuration"?: number;
        /**
          * (optional) Toast opened
         */
        "opened"?: boolean;
        /**
          * (optional) Toast position right
         */
        "positionRight"?: number;
        /**
          * (optional) Toast position at the top
         */
        "positionTop"?: number;
        /**
          * (optional) Toast size
         */
        "size"?: string;
        /**
          * (optional) Injected CSS styles
         */
        "styles"?: string;
        /**
          * (optional) Toast time
         */
        "time"?: number;
        /**
          * (optional) Toast variant
         */
        "variant"?: string;
    }
    interface IntrinsicElements {
        "app-logo": AppLogo;
        "app-mega-menu": AppMegaMenu;
        "app-navigation-main-mobile": AppNavigationMainMobile;
        "app-navigation-sector-mobile": AppNavigationSectorMobile;
        "scale-accordion": ScaleAccordion;
        "scale-alert": ScaleAlert;
        "scale-app-footer": ScaleAppFooter;
        "scale-app-header": ScaleAppHeader;
        "scale-app-shell": ScaleAppShell;
        "scale-breadcrumb": ScaleBreadcrumb;
        "scale-button": ScaleButton;
        "scale-card": ScaleCard;
        "scale-carousel": ScaleCarousel;
        "scale-chart-stack-card": ScaleChartStackCard;
        "scale-checkbox": ScaleCheckbox;
        "scale-collapsible": ScaleCollapsible;
        "scale-data-grid": ScaleDataGrid;
        "scale-date-picker": ScaleDatePicker;
        "scale-divider": ScaleDivider;
        "scale-dropdown": ScaleDropdown;
        "scale-icon": ScaleIcon;
        "scale-icon-action-add": ScaleIconActionAdd;
        "scale-icon-action-circle-close": ScaleIconActionCircleClose;
        "scale-icon-action-close": ScaleIconActionClose;
        "scale-icon-action-download": ScaleIconActionDownload;
        "scale-icon-action-edit": ScaleIconActionEdit;
        "scale-icon-action-favorite": ScaleIconActionFavorite;
        "scale-icon-action-hide-password": ScaleIconActionHidePassword;
        "scale-icon-action-logout": ScaleIconActionLogout;
        "scale-icon-action-random": ScaleIconActionRandom;
        "scale-icon-action-search": ScaleIconActionSearch;
        "scale-icon-action-sort": ScaleIconActionSort;
        "scale-icon-action-success": ScaleIconActionSuccess;
        "scale-icon-alert-imprint-dataprivacy": ScaleIconAlertImprintDataprivacy;
        "scale-icon-content-calendar": ScaleIconContentCalendar;
        "scale-icon-content-heart": ScaleIconContentHeart;
        "scale-icon-home-home": ScaleIconHomeHome;
        "scale-icon-navigation-collapse-down": ScaleIconNavigationCollapseDown;
        "scale-icon-navigation-collapse-up": ScaleIconNavigationCollapseUp;
        "scale-icon-navigation-external-link": ScaleIconNavigationExternalLink;
        "scale-icon-navigation-left": ScaleIconNavigationLeft;
        "scale-icon-navigation-right": ScaleIconNavigationRight;
        "scale-icon-service-devices-service": ScaleIconServiceDevicesService;
        "scale-icon-service-maintanance": ScaleIconServiceMaintanance;
        "scale-icon-service-services": ScaleIconServiceServices;
        "scale-icon-service-settings": ScaleIconServiceSettings;
        "scale-icon-service-support": ScaleIconServiceSupport;
        "scale-icon-user-file-analytics": ScaleIconUserFileAnalytics;
        "scale-input": ScaleInput;
        "scale-link": ScaleLink;
        "scale-list": ScaleList;
        "scale-list-item": ScaleListItem;
        "scale-logo": ScaleLogo;
        "scale-logo-svg": ScaleLogoSvg;
        "scale-menu-flyout": ScaleMenuFlyout;
        "scale-menu-flyout-divider": ScaleMenuFlyoutDivider;
        "scale-menu-flyout-item": ScaleMenuFlyoutItem;
        "scale-menu-flyout-list": ScaleMenuFlyoutList;
        "scale-modal": ScaleModal;
        "scale-nav-icon": ScaleNavIcon;
        "scale-nav-main": ScaleNavMain;
        "scale-nav-segment": ScaleNavSegment;
        "scale-pagination": ScalePagination;
        "scale-progress-bar": ScaleProgressBar;
        "scale-radio-button": ScaleRadioButton;
        "scale-rating-stars": ScaleRatingStars;
        "scale-sidebar-nav": ScaleSidebarNav;
        "scale-sidebar-nav-collapsible": ScaleSidebarNavCollapsible;
        "scale-sidebar-nav-item": ScaleSidebarNavItem;
        "scale-slider": ScaleSlider;
        "scale-ssr-slot-fix": ScaleSsrSlotFix;
        "scale-switch": ScaleSwitch;
        "scale-tab-header": ScaleTabHeader;
        "scale-tab-nav": ScaleTabNav;
        "scale-tab-panel": ScaleTabPanel;
        "scale-table": ScaleTable;
        "scale-tag": ScaleTag;
        "scale-text-field": ScaleTextField;
        "scale-textarea": ScaleTextarea;
        "scale-toast": ScaleToast;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-logo": LocalJSX.AppLogo & JSXBase.HTMLAttributes<HTMLAppLogoElement>;
            "app-mega-menu": LocalJSX.AppMegaMenu & JSXBase.HTMLAttributes<HTMLAppMegaMenuElement>;
            "app-navigation-main-mobile": LocalJSX.AppNavigationMainMobile & JSXBase.HTMLAttributes<HTMLAppNavigationMainMobileElement>;
            "app-navigation-sector-mobile": LocalJSX.AppNavigationSectorMobile & JSXBase.HTMLAttributes<HTMLAppNavigationSectorMobileElement>;
            "scale-accordion": LocalJSX.ScaleAccordion & JSXBase.HTMLAttributes<HTMLScaleAccordionElement>;
            "scale-alert": LocalJSX.ScaleAlert & JSXBase.HTMLAttributes<HTMLScaleAlertElement>;
            "scale-app-footer": LocalJSX.ScaleAppFooter & JSXBase.HTMLAttributes<HTMLScaleAppFooterElement>;
            "scale-app-header": LocalJSX.ScaleAppHeader & JSXBase.HTMLAttributes<HTMLScaleAppHeaderElement>;
            "scale-app-shell": LocalJSX.ScaleAppShell & JSXBase.HTMLAttributes<HTMLScaleAppShellElement>;
            "scale-breadcrumb": LocalJSX.ScaleBreadcrumb & JSXBase.HTMLAttributes<HTMLScaleBreadcrumbElement>;
            "scale-button": LocalJSX.ScaleButton & JSXBase.HTMLAttributes<HTMLScaleButtonElement>;
            "scale-card": LocalJSX.ScaleCard & JSXBase.HTMLAttributes<HTMLScaleCardElement>;
            "scale-carousel": LocalJSX.ScaleCarousel & JSXBase.HTMLAttributes<HTMLScaleCarouselElement>;
            "scale-chart-stack-card": LocalJSX.ScaleChartStackCard & JSXBase.HTMLAttributes<HTMLScaleChartStackCardElement>;
            "scale-checkbox": LocalJSX.ScaleCheckbox & JSXBase.HTMLAttributes<HTMLScaleCheckboxElement>;
            "scale-collapsible": LocalJSX.ScaleCollapsible & JSXBase.HTMLAttributes<HTMLScaleCollapsibleElement>;
            "scale-data-grid": LocalJSX.ScaleDataGrid & JSXBase.HTMLAttributes<HTMLScaleDataGridElement>;
            "scale-date-picker": LocalJSX.ScaleDatePicker & JSXBase.HTMLAttributes<HTMLScaleDatePickerElement>;
            "scale-divider": LocalJSX.ScaleDivider & JSXBase.HTMLAttributes<HTMLScaleDividerElement>;
            "scale-dropdown": LocalJSX.ScaleDropdown & JSXBase.HTMLAttributes<HTMLScaleDropdownElement>;
            "scale-icon": LocalJSX.ScaleIcon & JSXBase.HTMLAttributes<HTMLScaleIconElement>;
            "scale-icon-action-add": LocalJSX.ScaleIconActionAdd & JSXBase.HTMLAttributes<HTMLScaleIconActionAddElement>;
            "scale-icon-action-circle-close": LocalJSX.ScaleIconActionCircleClose & JSXBase.HTMLAttributes<HTMLScaleIconActionCircleCloseElement>;
            "scale-icon-action-close": LocalJSX.ScaleIconActionClose & JSXBase.HTMLAttributes<HTMLScaleIconActionCloseElement>;
            "scale-icon-action-download": LocalJSX.ScaleIconActionDownload & JSXBase.HTMLAttributes<HTMLScaleIconActionDownloadElement>;
            "scale-icon-action-edit": LocalJSX.ScaleIconActionEdit & JSXBase.HTMLAttributes<HTMLScaleIconActionEditElement>;
            "scale-icon-action-favorite": LocalJSX.ScaleIconActionFavorite & JSXBase.HTMLAttributes<HTMLScaleIconActionFavoriteElement>;
            "scale-icon-action-hide-password": LocalJSX.ScaleIconActionHidePassword & JSXBase.HTMLAttributes<HTMLScaleIconActionHidePasswordElement>;
            "scale-icon-action-logout": LocalJSX.ScaleIconActionLogout & JSXBase.HTMLAttributes<HTMLScaleIconActionLogoutElement>;
            "scale-icon-action-random": LocalJSX.ScaleIconActionRandom & JSXBase.HTMLAttributes<HTMLScaleIconActionRandomElement>;
            "scale-icon-action-search": LocalJSX.ScaleIconActionSearch & JSXBase.HTMLAttributes<HTMLScaleIconActionSearchElement>;
            "scale-icon-action-sort": LocalJSX.ScaleIconActionSort & JSXBase.HTMLAttributes<HTMLScaleIconActionSortElement>;
            "scale-icon-action-success": LocalJSX.ScaleIconActionSuccess & JSXBase.HTMLAttributes<HTMLScaleIconActionSuccessElement>;
            "scale-icon-alert-imprint-dataprivacy": LocalJSX.ScaleIconAlertImprintDataprivacy & JSXBase.HTMLAttributes<HTMLScaleIconAlertImprintDataprivacyElement>;
            "scale-icon-content-calendar": LocalJSX.ScaleIconContentCalendar & JSXBase.HTMLAttributes<HTMLScaleIconContentCalendarElement>;
            "scale-icon-content-heart": LocalJSX.ScaleIconContentHeart & JSXBase.HTMLAttributes<HTMLScaleIconContentHeartElement>;
            "scale-icon-home-home": LocalJSX.ScaleIconHomeHome & JSXBase.HTMLAttributes<HTMLScaleIconHomeHomeElement>;
            "scale-icon-navigation-collapse-down": LocalJSX.ScaleIconNavigationCollapseDown & JSXBase.HTMLAttributes<HTMLScaleIconNavigationCollapseDownElement>;
            "scale-icon-navigation-collapse-up": LocalJSX.ScaleIconNavigationCollapseUp & JSXBase.HTMLAttributes<HTMLScaleIconNavigationCollapseUpElement>;
            "scale-icon-navigation-external-link": LocalJSX.ScaleIconNavigationExternalLink & JSXBase.HTMLAttributes<HTMLScaleIconNavigationExternalLinkElement>;
            "scale-icon-navigation-left": LocalJSX.ScaleIconNavigationLeft & JSXBase.HTMLAttributes<HTMLScaleIconNavigationLeftElement>;
            "scale-icon-navigation-right": LocalJSX.ScaleIconNavigationRight & JSXBase.HTMLAttributes<HTMLScaleIconNavigationRightElement>;
            "scale-icon-service-devices-service": LocalJSX.ScaleIconServiceDevicesService & JSXBase.HTMLAttributes<HTMLScaleIconServiceDevicesServiceElement>;
            "scale-icon-service-maintanance": LocalJSX.ScaleIconServiceMaintanance & JSXBase.HTMLAttributes<HTMLScaleIconServiceMaintananceElement>;
            "scale-icon-service-services": LocalJSX.ScaleIconServiceServices & JSXBase.HTMLAttributes<HTMLScaleIconServiceServicesElement>;
            "scale-icon-service-settings": LocalJSX.ScaleIconServiceSettings & JSXBase.HTMLAttributes<HTMLScaleIconServiceSettingsElement>;
            "scale-icon-service-support": LocalJSX.ScaleIconServiceSupport & JSXBase.HTMLAttributes<HTMLScaleIconServiceSupportElement>;
            "scale-icon-user-file-analytics": LocalJSX.ScaleIconUserFileAnalytics & JSXBase.HTMLAttributes<HTMLScaleIconUserFileAnalyticsElement>;
            "scale-input": LocalJSX.ScaleInput & JSXBase.HTMLAttributes<HTMLScaleInputElement>;
            "scale-link": LocalJSX.ScaleLink & JSXBase.HTMLAttributes<HTMLScaleLinkElement>;
            "scale-list": LocalJSX.ScaleList & JSXBase.HTMLAttributes<HTMLScaleListElement>;
            "scale-list-item": LocalJSX.ScaleListItem & JSXBase.HTMLAttributes<HTMLScaleListItemElement>;
            "scale-logo": LocalJSX.ScaleLogo & JSXBase.HTMLAttributes<HTMLScaleLogoElement>;
            "scale-logo-svg": LocalJSX.ScaleLogoSvg & JSXBase.HTMLAttributes<HTMLScaleLogoSvgElement>;
            "scale-menu-flyout": LocalJSX.ScaleMenuFlyout & JSXBase.HTMLAttributes<HTMLScaleMenuFlyoutElement>;
            "scale-menu-flyout-divider": LocalJSX.ScaleMenuFlyoutDivider & JSXBase.HTMLAttributes<HTMLScaleMenuFlyoutDividerElement>;
            "scale-menu-flyout-item": LocalJSX.ScaleMenuFlyoutItem & JSXBase.HTMLAttributes<HTMLScaleMenuFlyoutItemElement>;
            "scale-menu-flyout-list": LocalJSX.ScaleMenuFlyoutList & JSXBase.HTMLAttributes<HTMLScaleMenuFlyoutListElement>;
            "scale-modal": LocalJSX.ScaleModal & JSXBase.HTMLAttributes<HTMLScaleModalElement>;
            "scale-nav-icon": LocalJSX.ScaleNavIcon & JSXBase.HTMLAttributes<HTMLScaleNavIconElement>;
            "scale-nav-main": LocalJSX.ScaleNavMain & JSXBase.HTMLAttributes<HTMLScaleNavMainElement>;
            "scale-nav-segment": LocalJSX.ScaleNavSegment & JSXBase.HTMLAttributes<HTMLScaleNavSegmentElement>;
            "scale-pagination": LocalJSX.ScalePagination & JSXBase.HTMLAttributes<HTMLScalePaginationElement>;
            "scale-progress-bar": LocalJSX.ScaleProgressBar & JSXBase.HTMLAttributes<HTMLScaleProgressBarElement>;
            "scale-radio-button": LocalJSX.ScaleRadioButton & JSXBase.HTMLAttributes<HTMLScaleRadioButtonElement>;
            "scale-rating-stars": LocalJSX.ScaleRatingStars & JSXBase.HTMLAttributes<HTMLScaleRatingStarsElement>;
            "scale-sidebar-nav": LocalJSX.ScaleSidebarNav & JSXBase.HTMLAttributes<HTMLScaleSidebarNavElement>;
            "scale-sidebar-nav-collapsible": LocalJSX.ScaleSidebarNavCollapsible & JSXBase.HTMLAttributes<HTMLScaleSidebarNavCollapsibleElement>;
            "scale-sidebar-nav-item": LocalJSX.ScaleSidebarNavItem & JSXBase.HTMLAttributes<HTMLScaleSidebarNavItemElement>;
            "scale-slider": LocalJSX.ScaleSlider & JSXBase.HTMLAttributes<HTMLScaleSliderElement>;
            "scale-ssr-slot-fix": LocalJSX.ScaleSsrSlotFix & JSXBase.HTMLAttributes<HTMLScaleSsrSlotFixElement>;
            "scale-switch": LocalJSX.ScaleSwitch & JSXBase.HTMLAttributes<HTMLScaleSwitchElement>;
            "scale-tab-header": LocalJSX.ScaleTabHeader & JSXBase.HTMLAttributes<HTMLScaleTabHeaderElement>;
            "scale-tab-nav": LocalJSX.ScaleTabNav & JSXBase.HTMLAttributes<HTMLScaleTabNavElement>;
            "scale-tab-panel": LocalJSX.ScaleTabPanel & JSXBase.HTMLAttributes<HTMLScaleTabPanelElement>;
            "scale-table": LocalJSX.ScaleTable & JSXBase.HTMLAttributes<HTMLScaleTableElement>;
            "scale-tag": LocalJSX.ScaleTag & JSXBase.HTMLAttributes<HTMLScaleTagElement>;
            "scale-text-field": LocalJSX.ScaleTextField & JSXBase.HTMLAttributes<HTMLScaleTextFieldElement>;
            "scale-textarea": LocalJSX.ScaleTextarea & JSXBase.HTMLAttributes<HTMLScaleTextareaElement>;
            "scale-toast": LocalJSX.ScaleToast & JSXBase.HTMLAttributes<HTMLScaleToastElement>;
        }
    }
}
